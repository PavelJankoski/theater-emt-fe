[{"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\index.js":"1","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\reportWebVitals.js":"2","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\authReducer.js":"3","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actionTypes.js":"4","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\shared\\utility.js":"5","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\containers\\App\\App.js":"6","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Navbar\\Navbar.js":"7","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Auth\\Login\\Login.js":"8","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Auth\\Register\\Register.js":"9","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Contact\\Contact.js":"10","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\index.js":"11","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\authActions.js":"12","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\config.js":"13","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Carousel\\ShowCarousel.js":"14","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Response\\Response.js":"15","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Footer\\Footer.js":"16","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowsList.js":"17","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowCard\\ShowCard.js":"18","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\Search\\Search.js":"19","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\ScheduleList.js":"20","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\ScheduleItem\\ScheduleItem.js":"21","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\CreateEditShow\\CreateEditShow.js":"22","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\CreateSceneModal\\CreateSceneModal.js":"23","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\CreateActorModal\\CreateActorModal.js":"24","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\DeleteShowModal\\DeleteShowModal.js":"25","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\theaterReducer.js":"26","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\theaterActions.js":"27","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\DeleteActorModal\\DeleteActorModal.js":"28","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowDetails\\ShowDetails.js":"29","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\Seats\\Seats.js":"30","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\reservationReducer.js":"31","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\reservationActions.js":"32","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\Seats\\Seat\\Seat.js":"33"},{"size":1425,"mtime":1612487970941,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":1776,"mtime":1612464513705,"results":"37","hashOfConfig":"35"},{"size":1340,"mtime":1612496831818,"results":"38","hashOfConfig":"35"},{"size":144,"mtime":1600458937141,"results":"39","hashOfConfig":"35"},{"size":3770,"mtime":1612487368750,"results":"40","hashOfConfig":"35"},{"size":2523,"mtime":1611972772299,"results":"41","hashOfConfig":"35"},{"size":4727,"mtime":1612216309200,"results":"42","hashOfConfig":"35"},{"size":6868,"mtime":1612315830117,"results":"43","hashOfConfig":"35"},{"size":2648,"mtime":1611884243146,"results":"44","hashOfConfig":"35"},{"size":405,"mtime":1612497125894,"results":"45","hashOfConfig":"35"},{"size":3333,"mtime":1612464875158,"results":"46","hashOfConfig":"35"},{"size":704,"mtime":1612314406359,"results":"47","hashOfConfig":"35"},{"size":2236,"mtime":1612498336261,"results":"48","hashOfConfig":"35"},{"size":752,"mtime":1612310332850,"results":"49","hashOfConfig":"35"},{"size":1403,"mtime":1611882380604,"results":"50","hashOfConfig":"35"},{"size":3652,"mtime":1612486209539,"results":"51","hashOfConfig":"35"},{"size":2448,"mtime":1612455584608,"results":"52","hashOfConfig":"35"},{"size":1423,"mtime":1612321099558,"results":"53","hashOfConfig":"35"},{"size":2279,"mtime":1612498363774,"results":"54","hashOfConfig":"35"},{"size":3290,"mtime":1612487285122,"results":"55","hashOfConfig":"35"},{"size":15523,"mtime":1612460809900,"results":"56","hashOfConfig":"35"},{"size":2527,"mtime":1612412782095,"results":"57","hashOfConfig":"35"},{"size":1934,"mtime":1612455571230,"results":"58","hashOfConfig":"35"},{"size":1354,"mtime":1612486141687,"results":"59","hashOfConfig":"35"},{"size":4176,"mtime":1612490981754,"results":"60","hashOfConfig":"35"},{"size":6074,"mtime":1612498925468,"results":"61","hashOfConfig":"35"},{"size":1368,"mtime":1612411421735,"results":"62","hashOfConfig":"35"},{"size":11073,"mtime":1612500194240,"results":"63","hashOfConfig":"35"},{"size":7695,"mtime":1612500921181,"results":"64","hashOfConfig":"35"},{"size":1375,"mtime":1612497031362,"results":"65","hashOfConfig":"35"},{"size":1369,"mtime":1612497196428,"results":"66","hashOfConfig":"35"},{"size":1279,"mtime":1612500431551,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1vklk5b",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\index.js",[],["140","141"],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\reportWebVitals.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\authReducer.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actionTypes.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\shared\\utility.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\containers\\App\\App.js",["142"],"import React, {useEffect} from \"react\";\nimport './App.css';\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport * as actions from '../../store/actions/index';\nimport Navbar from \"../../components/UI/Navbar/Navbar\";\nimport Login from \"../../components/Auth/Login/Login\";\nimport Footer from \"../../components/UI/Footer/Footer\";\nimport Register from \"../../components/Auth/Register/Register\";\nimport Contact from \"../../components/Contact/Contact\";\nimport ShowCarousel from \"../../components/UI/Carousel/ShowCarousel\";\nimport Response from \"../../components/Response/Response\";\nimport {faExclamationCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport ShowList from \"../../components/Shows/ShowsList\";\nimport ScheduleList from \"../../components/Schedule/ScheduleList\";\nimport CreateEditShow from \"../../components/Shows/CreateEditShow/CreateEditShow\";\nimport ShowDetails from \"../../components/Shows/ShowDetails/ShowDetails\";\nimport Seats from \"../../components/Schedule/Seats/Seats\";\n\nfunction App(props) {\n    useEffect(() => {\n        props.onTryAutoSignIn();\n    }, []);\n\n    let routes = (\n        <Switch>\n            <Route exact path=\"/login\" render={() => (\n                !props.isAuthenticated\n                    ? <Login />\n                    : <Redirect to='/' />\n            )} />\n\n            <Route exact path=\"/register\" render={() => (\n                !props.isAuthenticated\n                    ? <Register />\n                    : <Redirect to='/' />\n            )} />\n            <Route exact path=\"/\">\n                <ShowCarousel/>\n            </Route>\n            <Route exact path=\"/shows\">\n                <ShowList/>\n            </Route>\n            <Route exact path=\"/shows/create\" render={() => (\n                props.isAuthenticated && props.role === \"ROLE_ADMIN\"\n                    ? <CreateEditShow isEdit={false}/>\n                    : <Redirect to='/' />\n            )} />\n            <Route exact path=\"/shows/:showId/edit\" render={() => (\n                props.isAuthenticated && props.role === \"ROLE_ADMIN\"\n                    ? <CreateEditShow isEdit={true}/>\n                    : <Redirect to='/' />\n            )} />\n            <Route exact path=\"/shows/:showId/details\">\n                <ShowDetails/>\n            </Route>\n            <Route exact path=\"/schedule\">\n                <ScheduleList/>\n            </Route>\n            <Route exact path=\"/schedule/:showId/seats\" render={() => (\n                props.isAuthenticated\n                    ? <Seats/>\n                    : <Redirect to='/' />\n            )} />\n            <Route exact path=\"/contact\">\n                <Contact/>\n            </Route>\n            <Route exact path=\"/not-found\">\n                <div className=\"container-md bg-white fullWidth overflow-hidden\">\n                    <Response icon={faExclamationCircle}\n                              text={\"Error 404: Page not found!\"}\n                              link={\"/\"}\n                              buttonText={\"Back to Home\"}/>\n                </div>\n            </Route>\n            <Redirect to=\"/not-found\"/>\n        </Switch>\n    );\n\n    return (\n\n        <React.Fragment>\n\n            <div className=\"background\"/>\n            <Navbar/>\n            {routes}\n            <Footer/>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.authReducer.token !== null,\n        role: state.authReducer.role,\n        token: state.authReducer.token\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignIn: () => dispatch(actions.authCheckState())\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Navbar\\Navbar.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Auth\\Login\\Login.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Auth\\Register\\Register.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Contact\\Contact.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\index.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\authActions.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\config.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Carousel\\ShowCarousel.js",["143"],"import \"./ShowCarousel.css\";\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport React, {useEffect} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport UnavailableImage from \"../../../assets/images/unavailable-image.jpg\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Response from \"../../Response/Response\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ShowCarousel = (props) => {\r\n    useEffect(() => {\r\n        document.title = `Theater | Home`;\r\n        props.fetchShows(\"\");\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container-md bg-white fullWidth overflow-hidden\">\r\n            {props.loading ? <div className=\"text-center\" style={{\"marginTop\": \"20%\"}}>\r\n                <ClipLoader\r\n                    size={150}\r\n                    color=\"rgb(40,68,79)\"/>\r\n            </div> : <React.Fragment>\r\n                {!props.error && props.shows.length !== 0 ? <Carousel >\r\n                    {props.shows.map((show, index) => <Carousel.Item key={show.id.id}>\r\n                        <img\r\n                            className=\"d-block w-100 carousel-image\"\r\n                            src={!show.image ? UnavailableImage : 'data:image/jpeg;base64,'+show.image}\r\n                            alt={show.title}\r\n                        />\r\n                        <Carousel.Caption>\r\n                            <h3>{show.title}</h3>\r\n                            <p>{show.description}</p>\r\n                        </Carousel.Caption>\r\n                    </Carousel.Item>)}\r\n                </Carousel> : <Response icon={faSearch} text={\"No shows found\"} buttonText={null} link={null} />}\r\n            </React.Fragment>}\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        shows: state.theaterReducer.shows,\r\n        loading: state.theaterReducer.loading,\r\n        error: state.theaterReducer.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchShows: () => dispatch(actions.fetchShows(\"\"))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ShowCarousel));\r\n\r\n","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Response\\Response.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Footer\\Footer.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowsList.js",["144"],"import './ShowsList.css'\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport * as actions from \"../../store/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport ShowCard from \"./ShowCard/ShowCard\";\r\nimport Search from \"./Search/Search\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus, faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Response from \"../Response/Response\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport DeleteShowModal from \"../UI/Modal/DeleteShowModal/DeleteShowModal\";\r\n\r\nconst ShowList = (props) => {\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n    const [currentTitle, setCurrentTitle] = useState(\"\");\r\n    const [currentShowId, setCurrentShowId] = useState(\"\");\r\n\r\n    const handleCloseDeleteShowModal = () => setShowDeleteModal(false);\r\n    const handleShowDeleteShowModal = () => setShowDeleteModal(true);\r\n    const handleWhichShow = (id, title) => {\r\n        setCurrentShowId(id);\r\n        setCurrentTitle(title);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = `Theater | Shows`;\r\n        props.fetchShows(\"\");\r\n    }, []);\r\n\r\n    const allShows = props.shows.map((show, index) => {\r\n        return (\r\n            <ShowCard show={show}\r\n                      key={show.id.id}\r\n                      handleShowDeleteShowModal={handleShowDeleteShowModal}\r\n                      handleWhichShow={handleWhichShow}/>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div className=\"container-md bg-white fullWidth\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-sm-12 col-md-6 col-lg-6\" style={{textAlign: 'center', paddingTop: '35px'}}>\r\n                    <h2 className=\"mainTitle\">FEATURED SHOWS</h2>\r\n                </div>\r\n                <div id=\"cover\" className=\"col-12 col-sm-12 col-md-6 col-lg-6 mt-2\">\r\n                    <Search/>\r\n                </div>\r\n            </div>\r\n            {props.loading ? <div className=\"text-center w-100\" style={{\"marginTop\": \"20%\"}}>\r\n                <ClipLoader\r\n                    size={150}\r\n                    color=\"rgb(40,68,79)\"/>\r\n            </div> : <React.Fragment>{props.shows.length !== 0 || props.error ? <div className=\"cards mt-2 w-100\">\r\n                    {allShows}\r\n                    <DeleteShowModal show={showDeleteModal} handleClose={handleCloseDeleteShowModal} toShows={()=>{}} title={currentTitle} id={currentShowId}/>\r\n                </div>\r\n                : <div className=\"w-100 text-center\">\r\n                    <Response icon={faSearch}\r\n                              text={\"No shows found\"}\r\n                              link={null}\r\n                              buttonText={null}/>\r\n                </div>} {props.role === \"ROLE_ADMIN\" ? <div className=\"w-100 text-right\">\r\n                <Link to={\"/shows/create\"} className=\"btn btn-lg btn-primary mb-4\"\r\n                      style={{fontSize: '1.3em', \"marginRight\": \"10.5%\"}}>\r\n                    <FontAwesomeIcon icon={faPlus}/> Create Show\r\n                </Link>\r\n            </div>: null}</React.Fragment>}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        shows: state.theaterReducer.shows,\r\n        loading: state.theaterReducer.loading,\r\n        error: state.theaterReducer.error,\r\n        role: state.authReducer.role\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchShows: () => dispatch(actions.fetchShows(\"\"))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ShowList));\r\n","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowCard\\ShowCard.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\Search\\Search.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\ScheduleList.js",["145"],"import './ScheduleList.css';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport React, {useEffect} from \"react\";\r\nimport ScheduleItem from \"./ScheduleItem/ScheduleItem\";\r\nimport * as actions from \"../../store/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Response from \"../Response/Response\";\r\n\r\nconst ScheduleList = (props) => {\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        document.title = `Theater | Schedule`;\r\n        props.fetchShows();\r\n    }, []);\r\n\r\n    const scheduledShows = props.shows.filter(s=>Date.now()<new Date(s.from)).map((show, index)=>{\r\n            return(\r\n                <ScheduleItem show={show} key={show.id.id}/>\r\n            );\r\n    })\r\n\r\n    return (\r\n        <div className=\"container-md bg-white fullWidth\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-sm-12 col-md-6 col-lg-6\"\r\n                     style={{textAlign: 'center', paddingTop: '35px', \"paddingBottom\": '35px'}}>\r\n                    <h2 className=\"mainTitle\">\r\n                        UPCOMING SHOWS</h2>\r\n                </div>\r\n            </div>\r\n            {props.loading ? <div className=\"text-center w-100\" style={{\"marginTop\": \"20%\"}}>\r\n                    <ClipLoader\r\n                        size={150}\r\n                        color=\"rgb(40,68,79)\"/>\r\n                </div> : <React.Fragment>\r\n                {scheduledShows.length===0 ? <Response icon={faInfoCircle} text=\"No upcoming shows in the next period\" buttonText={null} link={null}/> : <div className=\"container\" style={{paddingBottom: '50px'}}>\r\n\r\n                    {scheduledShows}\r\n\r\n                </div>}\r\n\r\n            </React.Fragment>}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        shows: state.theaterReducer.shows,\r\n        loading: state.theaterReducer.loading,\r\n        error: state.theaterReducer.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchShows: () => dispatch(actions.fetchShows(\"\"))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ScheduleList));\r\n\r\n","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\ScheduleItem\\ScheduleItem.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\CreateEditShow\\CreateEditShow.js",["146","147","148","149"],"import './CreateEditShow.css';\r\nimport {Link, Redirect, useHistory, useParams, withRouter} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {Form} from \"react-bootstrap\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CreateSceneModal from \"../../UI/Modal/CreateSceneModal/CreateSceneModal\";\r\nimport CreateActorModal from \"../../UI/Modal/CreateActorModal/CreateActorModal\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport DeleteActorModal from \"../../UI/Modal/DeleteActorModal/DeleteActorModal\";\r\n\r\nconst CreateEditShow = (props) => {\r\n    const {showId} = useParams();\r\n    const [showSceneModal, setShowSceneModal] = useState(false);\r\n    const [showActorModal, setShowActorModal] = useState(false);\r\n    const [actorsCheck, setActorsCheck] = useState(false);\r\n    const [showDeleteActorModal, setShowDeleteActorModal] = useState(false);\r\n    const [currentActor, setCurrentActor] = useState({fullName: {firstName: \"\", lastName: \"\"}});\r\n    const [show, setShow] = useState(\r\n        {\r\n            title: \"\",\r\n            description: \"\",\r\n            director: \"\",\r\n            setDesigner: \"\",\r\n            costumeDesigner: \"\",\r\n            from: \"\",\r\n            duration: \"\",\r\n            ticketPrice: {\r\n                currency: \"MKD\",\r\n                amount: \"\"\r\n            },\r\n            actors: []\r\n\r\n        }\r\n    )\r\n\r\n\r\n    const handleCloseSceneModal = () => setShowSceneModal(false);\r\n    const handleCloseActorModal = () => setShowActorModal(false);\r\n    const handleCloseDeleteActorModal = () => {\r\n        setCurrentActor({fullName: {firstName: \"\", lastName: \"\"}});\r\n        setShowDeleteActorModal(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        document.title = `Theater | ${!props.isEdit ? \"Create Show\" : \"Edit Show\"}`;\r\n        props.fetchScenes();\r\n        props.fetchActors();\r\n        if(props.isEdit) {\r\n            let tmpShow = props.shows.find(s=>s.id.id === showId);\r\n            let dateTimeParts = tmpShow.from.split(\"T\");\r\n            setShow(tmpShow);\r\n            document.getElementById(\"showDate\").value = dateTimeParts[0];\r\n            let time = dateTimeParts[1].split(\":\");\r\n            document.getElementById(\"showTime\").value = time[0] + \":\" + time[1];\r\n            document.getElementById(\"showScene\").value = tmpShow.scene.id.id;\r\n\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        if(!actorsCheck && document.getElementById(\"actorCheckboxes\").hasChildNodes() && props.isEdit){\r\n            setActorsCheck(true);\r\n            let tmpShow = props.shows.find(s=>s.id.id === showId);\r\n            setActorCheckboxes(tmpShow);\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const todayDate = new Date().toLocaleDateString().split(\"/\");\r\n\r\n    const year = todayDate[2];\r\n    const month = todayDate[0].length !== 1 ? todayDate[0] : (\"0\" + todayDate[0]);\r\n    const day = todayDate[1].length !== 1 ? todayDate[1] : (\"0\" + todayDate[1]);\r\n\r\n    const handleInputChange = (e) => {\r\n        setShow({...show, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const setActorCheckboxes = (tmpShow) => {\r\n\r\n        for(let i = 0 ; i<tmpShow.actors.length; i++) {\r\n            document.getElementById(tmpShow.actors[i].id.id).checked = true;\r\n        }\r\n    }\r\n\r\n    const extractSelectedActors = () => {\r\n        const selectedActors = [];\r\n        const actorCheckboxes = document.getElementsByName(\"actor\");\r\n        for(let i = 0 ; i<actorCheckboxes.length;i++) {\r\n            if (actorCheckboxes[i].checked) {\r\n                selectedActors.push(props.actors.find(a=>a.id.id === actorCheckboxes[i].id))\r\n            }\r\n        }\r\n        return selectedActors\r\n    }\r\n\r\n\r\n    const handleCreateEditShow = (e) => {\r\n        e.preventDefault();\r\n        const dateAndTime = e.target.showDate.value + \"T\" + e.target.showTime.value + \":00\";\r\n        const tmpShow = {...show, from: dateAndTime, scene: props.scenes.find(s => s.id.id === e.target.showScene.value), actors: extractSelectedActors()};\r\n        let formData = new FormData();\r\n        formData.append('show', JSON.stringify(tmpShow));\r\n        let image = e.target.showPicture.files[0];\r\n        if(image) {\r\n            formData.append('image', image)\r\n        }\r\n        !props.isEdit ? props.createShow(formData) : props.editShow(showId, formData);\r\n        props.history.push('/shows');\r\n    }\r\n\r\n\r\n    const renderScenes = props.scenes.map((scene, idx) => {\r\n        return (\r\n            <option key={scene.id.id} value={scene.id.id}>{scene.name} ({scene.capacity})</option>\r\n        );\r\n    });\r\n\r\n    const renderActors = props.actors.map((actor, idx) => {\r\n        return (\r\n            <div className=\"checkbox\" key={actor.id.id}>\r\n                <label><input type=\"checkbox\" name=\"actor\" id={actor.id.id}\r\n                              style={{marginRight: '7px'}}/>{actor.fullName.firstName} {actor.fullName.lastName}\r\n                    <button onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setCurrentActor(actor);\r\n                        setShowDeleteActorModal(true);\r\n                    }} className=\"btn btn-danger btn-sm\" style={{marginLeft: '15px'}}>\r\n                        <FontAwesomeIcon icon={faTrash}/>\r\n                    </button>\r\n                </label>\r\n            </div>\r\n        );\r\n\r\n    });\r\n\r\n    return (\r\n        <div className=\"container-md bg-white fullWidth\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-sm-12 col-md-6 col-lg-6\" id=\"titleArea\">\r\n                    <h2 className=\"mainTitle\">\r\n                        {!props.isEdit ? \"Create Show\" : \"Edit Show\"}</h2>\r\n                </div>\r\n            </div>\r\n\r\n            <Form className=\"container\" onSubmit={handleCreateEditShow}>\r\n                <Form.Group controlId=\"title\">\r\n                    <Form.Label>Show title</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                                  name=\"title\"\r\n                                  value={show.title}\r\n                                  onChange={handleInputChange}\r\n                                  placeholder=\"Enter show title\" required/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Show description</Form.Label>\r\n                    <Form.Control name=\"description\"\r\n                                  value={show.description}\r\n                                  onChange={handleInputChange}\r\n                                  as=\"textarea\"\r\n                                  rows={4}\r\n                                  placeholder=\"Enter show description\" required/>\r\n                </Form.Group>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 col-12\">\r\n                        <Form.Group controlId=\"director\">\r\n                            <Form.Label>Director</Form.Label>\r\n                            <Form.Control type=\"text\"\r\n                                          name=\"director\"\r\n                                          value={show.director}\r\n                                          onChange={handleInputChange}\r\n                                          placeholder=\"Enter show director\" required/>\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-md-3 col-sm-6 col-12\">\r\n                        <Form.Group controlId=\"setDesigner\">\r\n                            <Form.Label>Set designer</Form.Label>\r\n                            <Form.Control type=\"text\"\r\n                                          name=\"setDesigner\"\r\n                                          value={show.setDesigner}\r\n                                          onChange={handleInputChange}\r\n                                          placeholder=\"Enter set designer\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-md-3 col-sm-6 col-12\">\r\n                        <Form.Group controlId=\"costumeDesigner\">\r\n                            <Form.Label>Costume designer</Form.Label>\r\n                            <Form.Control type=\"text\"\r\n                                          name=\"costumeDesigner\"\r\n                                          value={show.costumeDesigner}\r\n                                          onChange={handleInputChange}\r\n                                          placeholder=\"Enter costume designer\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <span>Actors:</span>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-10\">\r\n                                <div className=\"checkbox-list\" id=\"actorCheckboxes\">\r\n                                    {renderActors}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-2 text-center m-auto\">\r\n                                <button type=\"button\" onClick={() => setShowActorModal(true)}\r\n                                        className=\"btn btn-sm btn-primary p-2\"\r\n                                        style={{borderRadius: '50%', marginBottom: '20%'}}><FontAwesomeIcon icon={faPlus} size=\"lg\"/>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n\r\n                        <label htmlFor=\"showScene\">Select scene:</label>\r\n                        <select className=\"form-control\" name=\"showScene\" id=\"showScene\">\r\n                            {renderScenes}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-2 text-center m-auto\">\r\n                        <button id=\"createSceneButton\" type=\"button\" onClick={() => setShowSceneModal(true)}\r\n                                className=\"btn btn-sm btn-primary p-2 mt-4\" style={{borderRadius: '50%'}}><FontAwesomeIcon icon={faPlus} size=\"lg\"/> </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row mt-4\">\r\n                    <div className=\"col-lg-6 col-12\">\r\n                        <Form.Group controlId=\"showDate\">\r\n                            <Form.Label>Date</Form.Label>\r\n                            <Form.Control type=\"date\"\r\n                                          min={year + \"-\" + month + \"-\" + day}\r\n                                          name=\"showDate\" required/>\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6 col-12\">\r\n                        <Form.Group controlId=\"showTime\">\r\n                            <Form.Label>Time</Form.Label>\r\n                            <Form.Control type=\"time\"\r\n                                          name=\"showTime\" required/>\r\n                        </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6 col-12\">\r\n                        <Form.Group controlId=\"duration\">\r\n                            <Form.Label>Duration (in minutes)</Form.Label>\r\n                            <Form.Control type=\"number\"\r\n                                          value={show.duration}\r\n                                          onChange={handleInputChange}\r\n                                          name=\"duration\"\r\n                                          min=\"1\" placeholder=\"Enter show duration\" required/>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 col-sm-6 col-12\">\r\n                        <Form.Group controlId=\"ticketPrice\">\r\n                            <Form.Label>Ticket price</Form.Label>\r\n                            <Form.Control type=\"number\"\r\n                                          value={show.ticketPrice.amount}\r\n                                          onChange={(e) => setShow({...show, ticketPrice: {...show.ticketPrice, amount: e.target.value}})}\r\n                                          name=\"ticketPrice\" placeholder=\"Enter ticket price for this show\" min=\"1\" required/>\r\n                        </Form.Group>\r\n                    </div>\r\n                            <div className=\"col-md-3 col-sm-6 col-12\">\r\n                                <Form.Group controlId=\"currency\">\r\n                                    <Form.Label>Currency</Form.Label>\r\n                                    <Form.Control as=\"select\"\r\n                                                  onChange={(e) => setShow({...show, ticketPrice: {...show.ticketPrice, currency: e.target.value}})}\r\n                                                  value={show.ticketPrice.currency}\r\n                                                  name=\"currency\">\r\n                                        <option>MKD</option>\r\n                                        <option>EUR</option>\r\n                                        <option>USD</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </div>\r\n\r\n                    <div className=\"col-md-3 col-12\">\r\n                        <Form.Group>\r\n                            <Form.File className=\"mt-1\" id=\"showPicture\" name=\"showPicture\" label=\"Show picture\" accept=\"image/*\"/>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row d-flex flex-row-reverse mr-3 mt-4 mb-4\">\r\n                    <button type=\"submit\" className=\"btn btn-lg btn-primary\">{!props.isEdit ? \"Create Show\" : \"Edit Show\"}</button>\r\n                    <div className=\"center mr-3\">\r\n                        <Link to={\"/shows\"} className=\"btn btn-secondary btn-lg\">Back</Link>\r\n                    </div>\r\n                </div>\r\n            </Form>\r\n            <CreateSceneModal show={showSceneModal} handleClose={handleCloseSceneModal}/>\r\n            <CreateActorModal show={showActorModal} handleClose={handleCloseActorModal}/>\r\n            <DeleteActorModal show={showDeleteActorModal} handleClose={handleCloseDeleteActorModal} actor={currentActor}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        shows: state.theaterReducer.shows,\r\n        scenes: state.theaterReducer.scenes,\r\n        actors: state.theaterReducer.actors\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createShow: (formData) => dispatch(actions.createShow(formData)),\r\n        editShow: (showId, formData) => dispatch(actions.editShow(showId, formData)),\r\n        fetchScenes: () => dispatch(actions.fetchScenes()),\r\n        fetchActors: () => dispatch(actions.fetchActors()),\r\n        deleteActor: (actorId) => dispatch(actions.deleteActor(actorId))\r\n    };\r\n};\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateEditShow));\r\n","C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\CreateSceneModal\\CreateSceneModal.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\CreateActorModal\\CreateActorModal.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\DeleteShowModal\\DeleteShowModal.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\theaterReducer.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\theaterActions.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\UI\\Modal\\DeleteActorModal\\DeleteActorModal.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Shows\\ShowDetails\\ShowDetails.js",["150"],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\Seats\\Seats.js",["151"],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\reducers\\reservationReducer.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\store\\actions\\reservationActions.js",[],"C:\\Users\\Pavel\\Documents\\Programming projects\\React projects\\theater-emt\\src\\components\\Schedule\\Seats\\Seat\\Seat.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":23,"column":8,"nodeType":"158","endLine":23,"endColumn":10,"suggestions":"159"},{"ruleId":"156","severity":1,"message":"157","line":16,"column":8,"nodeType":"158","endLine":16,"endColumn":10,"suggestions":"160"},{"ruleId":"156","severity":1,"message":"157","line":29,"column":8,"nodeType":"158","endLine":29,"endColumn":10,"suggestions":"161"},{"ruleId":"156","severity":1,"message":"157","line":16,"column":8,"nodeType":"158","endLine":16,"endColumn":10,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":15,"nodeType":"165","messageId":"166","endLine":2,"endColumn":23},{"ruleId":"163","severity":1,"message":"167","line":2,"column":25,"nodeType":"165","messageId":"166","endLine":2,"endColumn":35},{"ruleId":"156","severity":1,"message":"168","line":61,"column":8,"nodeType":"158","endLine":61,"endColumn":10,"suggestions":"169"},{"ruleId":"156","severity":1,"message":"170","line":63,"column":5,"nodeType":"165","endLine":63,"endColumn":14,"suggestions":"171"},{"ruleId":"156","severity":1,"message":"168","line":20,"column":8,"nodeType":"158","endLine":20,"endColumn":10,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"168","line":22,"column":8,"nodeType":"158","endLine":22,"endColumn":10,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["176"],["177"],["178"],["179"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'props' and 'showId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["180"],"React Hook useEffect contains a call to 'setActorsCheck'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [actorsCheck, props.isEdit, props.shows, showId] as a second argument to the useEffect Hook.",["181"],["182"],["183"],"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"184","fix":"186"},{"desc":"184","fix":"187"},{"desc":"184","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"189","fix":"193"},{"desc":"189","fix":"194"},"Update the dependencies array to be: [props]",{"range":"195","text":"196"},{"range":"197","text":"196"},{"range":"198","text":"196"},{"range":"199","text":"196"},"Update the dependencies array to be: [props, showId]",{"range":"200","text":"201"},"Add dependencies array: [actorsCheck, props.isEdit, props.shows, showId]",{"range":"202","text":"203"},{"range":"204","text":"201"},{"range":"205","text":"201"},[1133,1135],"[props]",[633,635],[1201,1203],[629,631],[2542,2544],"[props, showId]",[2899,2899],", [actorsCheck, props.isEdit, props.shows, showId]",[916,918],[885,887]]